<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Js on My Blog built on Hugo with Jane theme</title>
    <link>https://yuhuix.github.io/hugo/categories/js/</link>
    <description>Recent content in Js on My Blog built on Hugo with Jane theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 25 Apr 2019 11:36:00 +0200</lastBuildDate>
    
	<atom:link href="https://yuhuix.github.io/hugo/categories/js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JS arrow function</title>
      <link>https://yuhuix.github.io/hugo/post/20190425-js-arrow-function/</link>
      <pubDate>Thu, 25 Apr 2019 11:36:00 +0200</pubDate>
      
      <guid>https://yuhuix.github.io/hugo/post/20190425-js-arrow-function/</guid>
      <description>&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;箭头函数没有 prototype(原型)，所以箭头函数本身没有 this&lt;/li&gt;
&lt;li&gt;箭头函数的 this 在定义的时候继承自外层第一个普通函数的 this（&lt;code&gt;this&lt;/code&gt; comes from the enclosing lexical scope）。&lt;/li&gt;
&lt;li&gt;如果箭头函数外层没有普通函数，严格模式和非严格模式下它的 this 都会指向 window(全局对象)&lt;/li&gt;
&lt;li&gt;箭头函数本身的 this 指向不能改变，但可以修改它要继承的对象的 this。&lt;/li&gt;
&lt;li&gt;箭头函数的 this 指向全局，使用 arguments 会报未声明的错误。&lt;/li&gt;
&lt;li&gt;箭头函数的 this 指向普通函数时,它的 argumens 继承于该普通函数&lt;/li&gt;
&lt;li&gt;使用 new 调用箭头函数会报错，因为箭头函数没有 constructor&lt;/li&gt;
&lt;li&gt;箭头函数不支持 new.target&lt;/li&gt;
&lt;li&gt;箭头函数不支持重命名函数参数,普通函数的函数参数支持重命名&lt;/li&gt;
&lt;li&gt;箭头函数相对于普通函数语法更简洁优雅&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JS number and rounding</title>
      <link>https://yuhuix.github.io/hugo/post/20190413-js-number-and-rounding/</link>
      <pubDate>Sat, 13 Apr 2019 21:40:00 +0200</pubDate>
      
      <guid>https://yuhuix.github.io/hugo/post/20190413-js-number-and-rounding/</guid>
      <description>&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;(1.2345).toFixed(3) === &amp;lsquo;1.234&amp;rsquo;, no rounding?&lt;/p&gt;

&lt;p&gt;IEEE Standard for Floating-Point Arithmetic (IEEE 754)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JS for statements and enumerability</title>
      <link>https://yuhuix.github.io/hugo/post/20180408-js-for-statements-and-enumerability/</link>
      <pubDate>Sun, 08 Apr 2018 12:34:00 +0200</pubDate>
      
      <guid>https://yuhuix.github.io/hugo/post/20180408-js-for-statements-and-enumerability/</guid>
      <description>&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;forEach()&lt;/code&gt; is a method for Arrays, &lt;code&gt;[1, 2].forEach((i) =&amp;gt; {console.log(i);})&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for in&lt;/code&gt; loops over enumerable property names of an object, &lt;code&gt;for (let i in {a: &#39;1&#39;, b: &#39;2&#39;}) {console.log(i);}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for of&lt;/code&gt; is new in ES6, and loops over an iterable object (&lt;code&gt;[Symbol.iterator]&lt;/code&gt;), returning a list of the values (different version of &lt;code&gt;forEach&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;enumerability&#34;&gt;Enumerability&lt;/h2&gt;

&lt;p&gt;Enumerable properties are those which can be iterated by a for..in loop.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Webpack Upgrade</title>
      <link>https://yuhuix.github.io/hugo/post/20180307-webpack-upgrade/</link>
      <pubDate>Wed, 07 Mar 2018 16:00:00 +0100</pubDate>
      
      <guid>https://yuhuix.github.io/hugo/post/20180307-webpack-upgrade/</guid>
      <description>&lt;h2 id=&#34;upgrade-of-webpack-to-4-x-x&#34;&gt;Upgrade of webpack to 4.x.x&lt;/h2&gt;

&lt;p&gt;A new major version of webpack has been released, 4.x.x.&lt;/p&gt;

&lt;p&gt;Here are the listed changes from an existing repository having webpack@2.2.1 and needed to be upgraded to webpack@4.1.0.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>